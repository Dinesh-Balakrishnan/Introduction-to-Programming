/*Shadows can be created with the box-shadow attribute: */
.shadows {
  /* Creating a shadow without blur: (Will simply create a grey background box) */
  box-shadow: 5px 10px red; /*box-shadow: 'horizontal-offset' 'vertical-offset' 'color' */

  /*Creating a shadow with blur: */
  box-shadow: 5px 10px 8px red; /*The 3rd value is the blur radius. */

  /*Inverting the shadow to the inside of the container: */
  box-shadow: 5px 10px 8px red inset; /*Use the inset keyword */

  /*Increasing the size of the shadow: */
  box-shadow: 5px 10px 8px 10px red; /*The 4th value is the spread radius. */

  /*Creating multiple shadows: */
  box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
}

/*Gradients help create beautifully colored backgrounds. NOTE: No IE support ;( */
.gradient {
  /*To create a linear gradient from one color to another: */
  background: linear-gradient(purple, cyan);

  /*The gradient can be angled: */
  background: linear-gradient(35deg, purple, cyan);

  /*Any number of colors can be passed into the gradient (min. 2): */
  background: linear-gradient(purple, cyan, black, blue);

  /*A gradient can be constantly repeated across a background: */
  background: repeating-linear-gradient(45deg, cyan, pink 8%, magenta 10%);
  /*Follows the same syntax as linear-gradient, a distance must be specified from
    the second color stop and after. This is needed to determine where to repeat values. */

  /*To create a radial gradient: OPTIONAL: Shape (circle or ellipse)*/
  background: radial-gradient(circle, fuchsia 20% , cyan);

  /*Instead of Shape: Size |closest-side at, farthest-side at, closest-corner at,
    farthest-corner at + Radius Length, Optional Radius Length (for Ellipses)| */
  background: radial-gradient(closest-side at 50%, fuchsia, cyan);

  /*The radial gradient can also be repeated: (Following the repeating gradient rule)*/
  background: repeating-radial-gradient(closest-side at 50%, fuchsia, cyan 20%);
}

/*The transform property physically changes the orientation of an element.
  NOTE: Transform calls override each other. All attributes need to be set at
  the same time.*/
.transform {
  /*To change the size of an element: */
  transform: scale(0.5); /*Hoiztonal and Vertical Scale */
  transform: scale(0.5, 0.25); /*Horizontal Size, Vertical Size */

  /*To skew an element across the x-axis and y-axis:  */
  transform: skewX(30deg);
  transform: skewY(-25deg);

  /*To rotate an element: */
  transform: rotate(45deg); /*Functions the same as rotateZ */

  /*To move an element out of place (Without affecting other elements): */
  transform: translate(20px, 10px);
  transform: translateX(20px) translateY(10px);
  /*Notice how multiple attributes can be set at the same time */

  /*To remove all transformation properties: */
  transform: none;
}

.transform-3D {
  /*When dealing with 3D transformations, the perspective attribute helps define the 3D space. */
  perspective: 500px; /*The value is the amount of space between the object and the user. */

  /*NOTE: Only the child elements receive the perspective view. Not the parent itself. */
}

.transform-3D .child {
  /*Perspective can be set for a single element itself with perspective(): */
  transform: perspective(500px);

  /*Elements can be rotated on the x and y axis: */
  transform: rotateX(15deg) rotateY(10deg);

  /*By using translateZ, an elment will essentially scale (Without perspective).
    Else, it moves an element across the z-axis. This is important as elements need
    to move away from their center point to create a 3-D effect.*/
  transform: translateZ(100px);

  /*Text has different anti-aliasing from other elements, so it appears fuzzy when
    scaled close to the user using translateZ. To fix the problem: */
  transform: translateZ(-100px);

  /*scaleZ will resize an element across the z-axis. The scaling isn't isotropic
    (same case with scaleX() and scaleY()), so the flat side of an element won't scale. */
  transform: scaleZ(100px);

  /*The origin around which an element will be transformed can be set: */
  transform-origin: top; /*Also 'left', 'right', 'bottom', 'center' or length */
  transform-origin: top left;
  transform-origin: bottom right -60px; /*Z-value must be a length. */

  /*The transform-style property ensures that elements are positioned in a 3D space instead
    of being flattened in the plane of the parent element. */
  transform-style: preserve-3d; /*'flat' is the default property. */

  /*An individual element is like a card, having two faces. The backside of the card
    can be hidden, making the element disappear. */
  backface-visibility: hidden;

  /*No transform properties are inherited. They can be inherited with the 'inherit'
    attribute. 'initial' won't reset an element back to a default 2D plane if the
    parent itself is 3 dimensional.*/
}
